{
  "_args": [
    [
      "etcher-image-stream@https://registry.npmjs.org/etcher-image-stream/-/etcher-image-stream-2.3.0.tgz",
      "/home/alumno/paquetes/src/huayra-clonar"
    ]
  ],
  "_from": "etcher-image-stream@>=2.3.0 <3.0.0",
  "_id": "etcher-image-stream@2.3.0",
  "_inCache": true,
  "_location": "/etcher-image-stream",
  "_phantomChildren": {},
  "_requested": {
    "name": "etcher-image-stream",
    "raw": "etcher-image-stream@https://registry.npmjs.org/etcher-image-stream/-/etcher-image-stream-2.3.0.tgz",
    "rawSpec": "https://registry.npmjs.org/etcher-image-stream/-/etcher-image-stream-2.3.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/etcher-image-stream/-/etcher-image-stream-2.3.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/etcher-image-stream/-/etcher-image-stream-2.3.0.tgz",
  "_shasum": "2de6ed527d4454ee3f010a0549c1627f0072d274",
  "_shrinkwrap": null,
  "_spec": "etcher-image-stream@https://registry.npmjs.org/etcher-image-stream/-/etcher-image-stream-2.3.0.tgz",
  "_where": "/home/alumno/paquetes/src/huayra-clonar",
  "author": {
    "email": "juan@resin.io",
    "name": "Juan Cruz Viotti"
  },
  "bugs": {
    "url": "https://github.com/resin-io-modules/etcher-image-stream/issues"
  },
  "dependencies": {
    "archive-type": "^3.2.0",
    "bluebird": "^3.3.5",
    "lodash": "^4.11.1",
    "lzma-native": "^1.1.0",
    "read-chunk": "^2.0.0",
    "resin-zip-image": "^1.1.2",
    "unbzip2-stream": "^1.0.9"
  },
  "description": "Get a readable stream from any type of OS image",
  "devDependencies": {
    "file-exists": "^1.0.0",
    "jsdoc-to-markdown": "^1.1.1",
    "jshint": "^2.9.1",
    "jshint-stylish": "^2.1.0",
    "mocha": "^2.4.5",
    "mochainon": "^1.0.0",
    "rindle": "^1.3.0",
    "tmp": "0.0.28"
  },
  "directories": {
    "test": "tests"
  },
  "homepage": "https://github.com/resin-io-modules/etcher-image-stream",
  "keywords": [
    "etcher",
    "image",
    "os",
    "stream",
    "extract"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "etcher-image-stream",
  "optionalDependencies": {},
  "readme": "etcher-image-stream\n===================\n\n> Get a readable stream from any type of OS image\n\n[![npm version](https://badge.fury.io/js/etcher-image-stream.svg)](http://badge.fury.io/js/etcher-image-stream)\n[![dependencies](https://david-dm.org/resin-io-modules/etcher-image-stream.svg)](https://david-dm.org/resin-io-modules/etcher-image-stream.svg)\n[![Build Status](https://travis-ci.org/resin-io-modules/etcher-image-stream.svg?branch=master)](https://travis-ci.org/resin-io-modules/etcher-image-stream)\n[![Build status](https://ci.appveyor.com/api/projects/status/dv96q5gd4nihuh83/branch/master?svg=true)](https://ci.appveyor.com/project/resin-io/etcher-image-stream/branch/master)\n\nInstallation\n------------\n\nInstall `etcher-image-stream` by running:\n\n```sh\n$ npm install --save etcher-image-stream\n```\n\nDocumentation\n-------------\n\n\n* [imageStream](#module_imageStream)\n    * [.supportedFileTypes](#module_imageStream.supportedFileTypes) : <code>Array.&lt;String&gt;</code>\n    * [.getFromFilePath(file)](#module_imageStream.getFromFilePath) ⇒ <code>Promise</code>\n\n<a name=\"module_imageStream.supportedFileTypes\"></a>\n\n### imageStream.supportedFileTypes : <code>Array.&lt;String&gt;</code>\n**Kind**: static property of <code>[imageStream](#module_imageStream)</code>  \n**Summary**: Supported file types  \n**Access:** public  \n**Example**  \n```js\nconst imageStream = require('etcher-image-stream');\n\nimageStream.supportedFileTypes.forEach(function(fileType) {\n  console.log('Supported file type: ' + fileType.extension);\n});\n```\n<a name=\"module_imageStream.getFromFilePath\"></a>\n\n### imageStream.getFromFilePath(file) ⇒ <code>Promise</code>\nThis function resolves an object containing the following properties:\n\n- `Number size`: The input file size.\n\n- `ReadableStream stream`: The input file stream.\n\n- `TransformStream transform`: A transform stream that performs any\nneeded transformation to get the image out of the source input file\n(for example, decompression).\n\nThe purpose of separating the above components is to handle cases like\nshowing a progress bar when you can't know the final uncompressed size.\n\nIn such case, you can pipe the `stream` through a progress stream using\nthe input file `size`, and apply the `transform` after the progress stream.\n\n**Kind**: static method of <code>[imageStream](#module_imageStream)</code>  \n**Summary**: Get an image stream from a file  \n**Access:** public  \n**Fulfil**: <code>Object</code> - image stream details  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| file | <code>String</code> | file path |\n\n**Example**  \n```js\nconst imageStream = require('etcher-image-stream');\n\nimageStream.getFromFilePath('path/to/rpi.img.xz').then(function(image) {\n  image.stream\n    .pipe(image.transform)\n    .pipe(fs.createWriteStream('/dev/disk2'));\n});\n```\n\nSupport\n-------\n\nIf you're having any problem, please [raise an issue](https://github.com/resin-io-modules/etcher-image-stream/issues/new) on GitHub and the Resin.io team will be happy to help.\n\nTests\n-----\n\nRun the test suite by doing:\n\n```sh\n$ npm test\n```\n\nContribute\n----------\n\n- Issue Tracker: [github.com/resin-io-modules/etcher-image-stream/issues](https://github.com/resin-io-modules/etcher-image-stream/issues)\n- Source Code: [github.com/resin-io-modules/etcher-image-stream](https://github.com/resin-io-modules/etcher-image-stream)\n\nBefore submitting a PR, please make sure that you include tests, and that [jshint](http://jshint.com) runs without any warning:\n\n```sh\n$ npm run lint\n```\n\nLicense\n-------\n\n`etcher-image-stream` is free software, and may be redistributed under the terms specified in the [license](https://github.com/resin-io-modules/etcher-image-stream/blob/master/LICENSE).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/resin-io-modules/etcher-image-stream.git"
  },
  "scripts": {
    "lint": "jshint --config .jshintrc --reporter=node_modules/jshint-stylish lib tests",
    "readme": "jsdoc2md --template doc/README.hbs lib/index.js > README.md",
    "test": "npm run lint && mocha --recursive tests/*.spec.js -R spec"
  },
  "version": "2.3.0"
}
