{
  "_args": [
    [
      "etcher-image-write@https://registry.npmjs.org/etcher-image-write/-/etcher-image-write-5.0.2.tgz",
      "/home/alumno/paquetes/src/huayra-clonar"
    ]
  ],
  "_from": "etcher-image-write@>=5.0.2 <6.0.0",
  "_id": "etcher-image-write@5.0.2",
  "_inCache": true,
  "_location": "/etcher-image-write",
  "_phantomChildren": {},
  "_requested": {
    "name": "etcher-image-write",
    "raw": "etcher-image-write@https://registry.npmjs.org/etcher-image-write/-/etcher-image-write-5.0.2.tgz",
    "rawSpec": "https://registry.npmjs.org/etcher-image-write/-/etcher-image-write-5.0.2.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/etcher-image-write/-/etcher-image-write-5.0.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/etcher-image-write/-/etcher-image-write-5.0.2.tgz",
  "_shasum": "79fab89357fc763fd58fcc697ee33a023c006d3b",
  "_shrinkwrap": null,
  "_spec": "etcher-image-write@https://registry.npmjs.org/etcher-image-write/-/etcher-image-write-5.0.2.tgz",
  "_where": "/home/alumno/paquetes/src/huayra-clonar",
  "author": {
    "email": "juan@resin.io",
    "name": "Juan Cruz Viotti"
  },
  "bin": {
    "etcher-image-write": "./bin/cli.js"
  },
  "bugs": {
    "url": "https://github.com/resin-io-modules/etcher-image-write/issues"
  },
  "dependencies": {
    "bluebird": "^3.3.5",
    "crc32-stream": "^0.4.0",
    "denymount": "^2.1.0",
    "dev-null-stream": "0.0.1",
    "diskpart": "^1.0.0",
    "lodash": "^4.13.1",
    "progress-stream": "^1.1.1",
    "slice-stream2": "^2.0.0",
    "stream-chunker": "^1.2.8"
  },
  "description": "The cross-platform way to stream an OS image to a device",
  "devDependencies": {
    "jsdoc-to-markdown": "^1.1.1",
    "jshint": "^2.9.2",
    "jshint-stylish": "^2.1.0",
    "mocha": "~2.0.1",
    "mochainon": "^1.0.0",
    "nock": "^2.6.0",
    "rindle": "^1.3.0",
    "string-to-stream": "^1.0.1",
    "tmp": "0.0.28",
    "wary": "^1.1.0"
  },
  "directories": {
    "test": "tests"
  },
  "homepage": "https://github.com/resin-io-modules/etcher-image-write",
  "keywords": [
    "etcher",
    "image",
    "os",
    "flash",
    "burn",
    "write"
  ],
  "license": "Apache-2.0",
  "main": "lib/write.js",
  "name": "etcher-image-write",
  "optionalDependencies": {
    "diskpart": "^1.0.0"
  },
  "readme": "etcher-image-write\n=================\n\n> The cross-platform way to stream an OS image to a device\n\n[![npm version](https://badge.fury.io/js/etcher-image-write.svg)](http://badge.fury.io/js/etcher-image-write)\n[![dependencies](https://david-dm.org/resin-io-modules/etcher-image-write.svg)](https://david-dm.org/resin-io-modules/etcher-image-write.svg)\n[![Build Status](https://travis-ci.org/resin-io-modules/etcher-image-write.svg?branch=master)](https://travis-ci.org/resin-io-modules/etcher-image-write)\n[![Build status](https://ci.appveyor.com/api/projects/status/nmjinr68wtd9ne2h/branch/master?svg=true)](https://ci.appveyor.com/project/resin-io/etcher-image-write/branch/master)\n\nInstallation\n------------\n\nInstall `etcher-image-write` by running:\n\n```sh\n$ npm install --save etcher-image-write\n```\n\nDocumentation\n-------------\n\n<a name=\"module_imageWrite.write\"></a>\n\n### imageWrite.write(device, stream, options) â‡’ <code>EventEmitter</code>\n**NOTICE:** You might need to run this function as sudo/administrator to\navoid permission issues.\n\nThe returned EventEmitter instance emits the following events:\n\n- `progress`: A progress event that passes a state object of the form:\n\n```js\n{\n  type: 'write' // possible values: 'write', 'check'.\n  percentage: 9.05,\n  transferred: 949624,\n  length: 10485760,\n  remaining: 9536136,\n  eta: 10,\n  runtime: 0,\n  delta: 295396,\n  speed: 949624\n}\n```\n\n- `error`: An error event.\n- `done`: An event emitted with a boolean success value.\n\nEnabling the `check` option is useful to ensure the image was\nsuccessfully written to the device. This is checked by calculating and\ncomparing checksums from both the original image and the data written\nto the device.\n\nThe `transform` option is used to handle cases like decompression of\nan image on the fly. The stream is piped through this transform stream\n*after* the progress stream and *before* any writing and alignment.\n\nThis allows the progress to be accurately displayed even when the\nclient doesn't know the final uncompressed size.\n\nFor example, to handle writing a compressed file, you pass the\ncompressed stream to `.write()`, pass the *compressed stream size*,\nand a transform stream to decompress the file.\n\n**Kind**: static method of <code>[imageWrite](#module_imageWrite)</code>  \n**Summary**: Write a readable stream to a device  \n**Returns**: <code>EventEmitter</code> - emitter  \n**Access:** public  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| device | <code>String</code> |  | device |\n| stream | <code>ReadStream</code> |  | readable stream |\n| options | <code>Object</code> |  | options |\n| options.size | <code>Number</code> |  | input stream size |\n| [options.transform] | <code>TransformStream</code> |  | transform stream |\n| [options.check] | <code>Boolean</code> | <code>false</code> | enable write check |\n\n**Example**  \n```js\nvar myStream = fs.createReadStream('my/image');\n\nvar emitter = imageWrite.write('/dev/disk2', myStream, {\n  check: true,\n  size: fs.statSync('my/image').size\n});\n\nemitter.on('progress', function(state) {\n  console.log(state);\n});\n\nemitter.on('error', function(error) {\n  console.error(error);\n});\n\nemitter.on('done', function(results) {\n  if (results.passedValidation) {\n    console.log('Success!');\n  } else {\n    console.log('Failed!');\n  }\n});\n```\n\nSupport\n-------\n\nIf you're having any problem, please [raise an issue](https://github.com/resin-io-modules/etcher-image-write/issues/new) on GitHub and the Resin.io team will be happy to help.\n\nTests\n-----\n\nRun the test suite by doing:\n\n```sh\n$ npm test\n```\n\nContribute\n----------\n\n- Issue Tracker: [github.com/resin-io-modules/etcher-image-write/issues](https://github.com/resin-io-modules/etcher-image-write/issues)\n- Source Code: [github.com/resin-io-modules/etcher-image-write](https://github.com/resin-io-modules/etcher-image-write)\n\nBefore submitting a PR, please make sure that you include tests, and that [jshint](http://jshint.com) runs without any warning:\n\n```sh\n$ npm run lint\n```\n\nLicense\n-------\n\n`etcher-image-write` is free software, and may be redistributed under the terms specified in the [license](https://github.com/resin-io-modules/etcher-image-write/blob/master/LICENSE).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/resin-io-modules/etcher-image-write.git"
  },
  "scripts": {
    "lint": "jshint --config .jshintrc --reporter=node_modules/jshint-stylish lib tests bin example.js",
    "readme": "jsdoc2md --template doc/README.hbs lib/write.js > README.md",
    "test": "npm run lint && mocha --recursive tests/*.spec.js -R spec && node tests/e2e.js"
  },
  "version": "5.0.2"
}
