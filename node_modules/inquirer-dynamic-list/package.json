{
  "_args": [
    [
      "inquirer-dynamic-list@https://registry.npmjs.org/inquirer-dynamic-list/-/inquirer-dynamic-list-1.0.0.tgz",
      "/home/alumno/paquetes/src/huayra-clonar"
    ]
  ],
  "_from": "inquirer-dynamic-list@>=1.0.0 <2.0.0",
  "_id": "inquirer-dynamic-list@1.0.0",
  "_inCache": true,
  "_location": "/inquirer-dynamic-list",
  "_phantomChildren": {},
  "_requested": {
    "name": "inquirer-dynamic-list",
    "raw": "inquirer-dynamic-list@https://registry.npmjs.org/inquirer-dynamic-list/-/inquirer-dynamic-list-1.0.0.tgz",
    "rawSpec": "https://registry.npmjs.org/inquirer-dynamic-list/-/inquirer-dynamic-list-1.0.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/inquirer-dynamic-list/-/inquirer-dynamic-list-1.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/resin-cli-visuals"
  ],
  "_resolved": "https://registry.npmjs.org/inquirer-dynamic-list/-/inquirer-dynamic-list-1.0.0.tgz",
  "_shasum": "c75de9423d720a84d181073a40a18eea47ed0b78",
  "_shrinkwrap": null,
  "_spec": "inquirer-dynamic-list@https://registry.npmjs.org/inquirer-dynamic-list/-/inquirer-dynamic-list-1.0.0.tgz",
  "_where": "/home/alumno/paquetes/src/huayra-clonar",
  "author": {
    "email": "jviottidc@gmail.com",
    "name": "Juan Cruz Viotti"
  },
  "bugs": {
    "url": "https://github.com/jviotti/inquirer-dynamic-list/issues"
  },
  "dependencies": {
    "bluebird": "^2.10.2",
    "inquirer": "^0.11.0",
    "lodash": "^3.10.1"
  },
  "description": "A subclass of inquirer's list whose choices can be updated on the fly",
  "devDependencies": {
    "coffee-script": "~1.8.0",
    "gulp": "~3.8.10",
    "gulp-coffee": "~2.2.0",
    "gulp-coffeelint": "~0.4.0",
    "gulp-mocha": "~2.0.0",
    "gulp-util": "~3.0.1",
    "jsdoc-to-markdown": "^1.1.1",
    "mocha": "~2.0.1",
    "mochainon": "^1.0.0"
  },
  "directories": {
    "test": "tests"
  },
  "homepage": "https://github.com/jviotti/inquirer-dynamic-list",
  "keywords": [
    "inquirer",
    "list",
    "dynamic"
  ],
  "license": "MIT",
  "main": "build/dynamic-list.js",
  "name": "inquirer-dynamic-list",
  "optionalDependencies": {},
  "readme": "inquirer-dynamic-list\n=====================\n\n[![npm version](https://badge.fury.io/js/inquirer-dynamic-list.svg)](http://badge.fury.io/js/inquirer-dynamic-list)\n[![dependencies](https://david-dm.org/jviotti/inquirer-dynamic-list.png)](https://david-dm.org/jviotti/inquirer-dynamic-list.png)\n[![Build Status](https://travis-ci.org/jviotti/inquirer-dynamic-list.svg?branch=master)](https://travis-ci.org/jviotti/inquirer-dynamic-list)\n[![Build status](https://ci.appveyor.com/api/projects/status/82yh8tu2vqg3mhp0?svg=true)](https://ci.appveyor.com/project/resin-io/inquirer-dynamic-list)\n\nA subclass of inquirer's list whose choices can be updated on the fly.\n\nNotice this is a proof of concept and breaks inquirer's encapsulation.\n\nInstallation\n------------\n\nInstall `inquirer-dynamic-list` by running:\n\n```sh\n$ npm install --save inquirer-dynamic-list\n```\n\nDocumentation\n-------------\n\n\n* [dynamiclist](#module_dynamiclist)\n  * [~DynamicList](#module_dynamiclist..DynamicList)\n    * [new DynamicList([options])](#new_module_dynamiclist..DynamicList_new)\n    * [.render()](#module_dynamiclist..DynamicList+render)\n    * [.addChoice(choice)](#module_dynamiclist..DynamicList+addChoice)\n    * [.removeChoice(choice)](#module_dynamiclist..DynamicList+removeChoice)\n    * [.run()](#module_dynamiclist..DynamicList+run) ⇒ <code>Promise</code>\n\n<a name=\"module_dynamiclist..DynamicList\"></a>\n### dynamiclist~DynamicList\n**Kind**: inner class of <code>[dynamiclist](#module_dynamiclist)</code>  \n**Summary**: Dynamic list widget  \n**Access:** public  \n\n* [~DynamicList](#module_dynamiclist..DynamicList)\n  * [new DynamicList([options])](#new_module_dynamiclist..DynamicList_new)\n  * [.render()](#module_dynamiclist..DynamicList+render)\n  * [.addChoice(choice)](#module_dynamiclist..DynamicList+addChoice)\n  * [.removeChoice(choice)](#module_dynamiclist..DynamicList+removeChoice)\n  * [.run()](#module_dynamiclist..DynamicList+run) ⇒ <code>Promise</code>\n\n<a name=\"new_module_dynamiclist..DynamicList_new\"></a>\n#### new DynamicList([options])\n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [options] | <code>Object</code> |  | options |\n| options.choices | <code>Array.&lt;Object&gt;</code> |  | initial choices |\n| options.message | <code>String</code> |  | widget message |\n| [options.emptyMessage] | <code>String</code> | <code>&#x27;No options&#x27;</code> | message for when no choices |\n\n**Example**  \n```js\nlist = new DynamicList\n\tmessage: 'Foo'\n\temptyMessage: 'Nothing to show'\n\tchoices: [\n\t\tname: 'Foo'\n\t\tvalue: 'foo'\n\t]\n\n# Run the list widget\nlist.run().then (answer) ->\n\tconsole.log(answer)\n\n# You can add new choices on the fly\nlist.addChoice\n\tname: 'Bar'\n\tvalue: 'bar'\n\n# We re-render to be able to see the new options\nlist.render()\n```\n<a name=\"module_dynamiclist..DynamicList+render\"></a>\n#### dynamicList.render()\n**Kind**: instance method of <code>[DynamicList](#module_dynamiclist..DynamicList)</code>  \n**Summary**: Render the list  \n**Access:** public  \n**Example**  \n```js\nlist = new DynamicList\n\tmessage: 'Foo'\n\temptyMessage: 'Nothing to show'\n\tchoices: [\n\t\tname: 'Foo'\n\t\tvalue: 'foo'\n\t]\n\nlist.render()\n```\n<a name=\"module_dynamiclist..DynamicList+addChoice\"></a>\n#### dynamicList.addChoice(choice)\n**Kind**: instance method of <code>[DynamicList](#module_dynamiclist..DynamicList)</code>  \n**Summary**: Add a choice  \n**Access:** public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| choice | <code>Object</code> | choice |\n\n**Example**  \n```js\nlist = new DynamicList\n\tmessage: 'Foo'\n\temptyMessage: 'Nothing to show'\n\tchoices: [\n\t\tname: 'Foo'\n\t\tvalue: 'foo'\n\t]\n\nlist.addChoice(name: 'Bar', value: 'bar')\nlist.render()\n```\n<a name=\"module_dynamiclist..DynamicList+removeChoice\"></a>\n#### dynamicList.removeChoice(choice)\n**Kind**: instance method of <code>[DynamicList](#module_dynamiclist..DynamicList)</code>  \n**Summary**: Remove a choice  \n**Access:** public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| choice | <code>Object</code> | choice |\n\n**Example**  \n```js\nlist = new DynamicList\n\tmessage: 'Foo'\n\temptyMessage: 'Nothing to show'\n\tchoices: [\n\t\tname: 'Foo'\n\t\tvalue: 'foo'\n\t]\n\nlist.removeChoice(name: 'Foo', value: 'foo')\nlist.render()\n```\n<a name=\"module_dynamiclist..DynamicList+run\"></a>\n#### dynamicList.run() ⇒ <code>Promise</code>\n**Kind**: instance method of <code>[DynamicList](#module_dynamiclist..DynamicList)</code>  \n**Summary**: Run the widget  \n**Access:** public  \n**Fulfil**: <code>String</code> answer  \n**Example**  \n```js\nlist = new DynamicList\n\tmessage: 'Foo'\n\temptyMessage: 'Nothing to show'\n\tchoices: [\n\t\tname: 'Foo'\n\t\tvalue: 'foo'\n\t]\n\nlist.run().then (answer) ->\n\tconsole.log(answer)\n```\n\nSupport\n-------\n\nIf you're having any problem, please [raise an issue](https://github.com/jviotti/inquirer-dynamic-list/issues/new) on GitHub and I'll be happy to help.\n\nTests\n-----\n\nRun the test suite by doing:\n\n```sh\n$ gulp test\n```\n\nContribute\n----------\n\n- Issue Tracker: [github.com/jviotti/inquirer-dynamic-list/issues](https://github.com/jviotti/inquirer-dynamic-list/issues)\n- Source Code: [github.com/jviotti/inquirer-dynamic-list](https://github.com/jviotti/inquirer-dynamic-list)\n\nBefore submitting a PR, try to include tests, and make sure that [coffeelint](http://www.coffeelint.org/) runs without any warning:\n\n```sh\n$ gulp lint\n```\n\nLicense\n-------\n\nThe project is licensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/jviotti/inquirer-dynamic-list.git"
  },
  "scripts": {
    "prepublish": "gulp build",
    "readme": "jsdoc2md --template doc/README.hbs build/dynamic-list.js > README.md",
    "test": "gulp test"
  },
  "version": "1.0.0"
}
