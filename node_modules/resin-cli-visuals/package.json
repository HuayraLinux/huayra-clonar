{
  "_args": [
    [
      "resin-cli-visuals@https://registry.npmjs.org/resin-cli-visuals/-/resin-cli-visuals-1.2.9.tgz",
      "/home/alumno/paquetes/src/huayra-clonar"
    ]
  ],
  "_from": "resin-cli-visuals@>=1.2.8 <2.0.0",
  "_id": "resin-cli-visuals@1.2.9",
  "_inCache": true,
  "_location": "/resin-cli-visuals",
  "_phantomChildren": {},
  "_requested": {
    "name": "resin-cli-visuals",
    "raw": "resin-cli-visuals@https://registry.npmjs.org/resin-cli-visuals/-/resin-cli-visuals-1.2.9.tgz",
    "rawSpec": "https://registry.npmjs.org/resin-cli-visuals/-/resin-cli-visuals-1.2.9.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/resin-cli-visuals/-/resin-cli-visuals-1.2.9.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/resin-cli-form"
  ],
  "_resolved": "https://registry.npmjs.org/resin-cli-visuals/-/resin-cli-visuals-1.2.9.tgz",
  "_shasum": "04f8a978358bf6b87db07019a2a406c011d3e1b4",
  "_shrinkwrap": null,
  "_spec": "resin-cli-visuals@https://registry.npmjs.org/resin-cli-visuals/-/resin-cli-visuals-1.2.9.tgz",
  "_where": "/home/alumno/paquetes/src/huayra-clonar",
  "author": {
    "email": "juan@resin.io",
    "name": "Juan Cruz Viotti"
  },
  "bugs": {
    "url": "https://github.com/resin-io/resin-cli-visuals/issues"
  },
  "dependencies": {
    "bluebird": "^2.9.34",
    "chalk": "^1.1.1",
    "cli-spinner": "^0.2.1",
    "columnify": "^1.5.1",
    "drivelist": "^3.1.0",
    "inquirer": "^0.11.0",
    "inquirer-dynamic-list": "^1.0.0",
    "lodash": "^3.10.0",
    "moment": "^2.10.3",
    "moment-duration-format": "^1.3.0",
    "progress-bar-formatter": "^2.0.1",
    "underscore.string": "^3.1.1"
  },
  "description": "Resin CLI UI widgets",
  "devDependencies": {
    "coffee-script": "^1.9.3",
    "gulp": "^3.9.0",
    "gulp-coffee": "^2.3.1",
    "gulp-coffeelint": "^0.5.0",
    "gulp-mocha": "^2.1.3",
    "gulp-sequence": "^0.4.1",
    "gulp-util": "~3.0.1",
    "jsdoc-to-markdown": "^1.1.1",
    "mocha": "^2.2.5",
    "mochainon": "^1.0.0"
  },
  "directories": {
    "test": "tests"
  },
  "homepage": "https://github.com/resin-io/resin-cli-visuals",
  "keywords": [
    "resin",
    "cli",
    "widgets",
    "text",
    "visuals"
  ],
  "license": "Apache-2.0",
  "main": "build/visuals.js",
  "name": "resin-cli-visuals",
  "optionalDependencies": {},
  "readme": "resin-cli-visuals\n-----------------\n\n[![npm version](https://badge.fury.io/js/resin-cli-visuals.svg)](http://badge.fury.io/js/resin-cli-visuals)\n[![dependencies](https://david-dm.org/resin-io/resin-cli-visuals.png)](https://david-dm.org/resin-io/resin-cli-visuals.png)\n[![Build Status](https://travis-ci.org/resin-io/resin-cli-visuals.svg?branch=master)](https://travis-ci.org/resin-io/resin-cli-visuals)\n[![Build status](https://ci.appveyor.com/api/projects/status/dljdbst05bp29wgv?svg=true)](https://ci.appveyor.com/project/jviotti/resin-cli-visuals)\n\nJoin our online chat at [![Gitter chat](https://badges.gitter.im/resin-io/chat.png)](https://gitter.im/resin-io/chat)\n\nResin CLI UI widgets.\n\nRole\n----\n\nThe intention of this module is to provide a collection of command line widgets to be used by the Resin CLI and its plugins.\n\nInstallation\n------------\n\nInstall `resin-cli-visuals` by running:\n\n```sh\n$ npm install --save resin-cli-visuals\n```\n\nDocumentation\n-------------\n\n<a name=\"visuals\"></a>\n## visuals : <code>object</code>\n**Kind**: global namespace  \n\n* [visuals](#visuals) : <code>object</code>\n  * [.Progress](#visuals.Progress)\n    * [new Progress(message)](#new_visuals.Progress_new)\n    * [.update(state)](#visuals.Progress+update)\n  * [.Spinner](#visuals.Spinner)\n    * [new Spinner(message)](#new_visuals.Spinner_new)\n    * [.start()](#visuals.Spinner+start)\n    * [.stop()](#visuals.Spinner+stop)\n  * [.table](#visuals.table) : <code>object</code>\n    * [.horizontal(data, ordering)](#visuals.table.horizontal)\n    * [.vertical(data, ordering)](#visuals.table.vertical)\n  * [.drive([message])](#visuals.drive) ⇒ <code>Promise.&lt;String&gt;</code>\n\n<a name=\"visuals.Progress\"></a>\n### visuals.Progress\n**Kind**: static class of <code>[visuals](#visuals)</code>  \n**Summary**: Create a CLI Progress Bar  \n**Access:** public  \n\n* [.Progress](#visuals.Progress)\n  * [new Progress(message)](#new_visuals.Progress_new)\n  * [.update(state)](#visuals.Progress+update)\n\n<a name=\"new_visuals.Progress_new\"></a>\n#### new Progress(message)\n**Returns**: <code>Progress</code> - progress bar instance  \n**Throws**:\n\n- Will throw if no message.\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| message | <code>String</code> | message |\n\n**Example**  \n```js\nprogress = new visuals.Progress('Hello World')\n```\n<a name=\"visuals.Progress+update\"></a>\n#### progress.update(state)\n**Kind**: instance method of <code>[Progress](#visuals.Progress)</code>  \n**Summary**: Update the progress bar  \n**Access:** public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| state | <code>Object</code> | progress state |\n| state.percentage | <code>Number</code> | percentage |\n| state.eta | <code>Number</code> | eta in seconds |\n\n**Example**  \n```js\nprogress = new visuals.Progress('Hello World')\nprogress.update(percentage: 49, eta: 300)\n```\n<a name=\"visuals.Spinner\"></a>\n### visuals.Spinner\n**Kind**: static class of <code>[visuals](#visuals)</code>  \n**Summary**: Create a CLI Spinner  \n**Access:** public  \n\n* [.Spinner](#visuals.Spinner)\n  * [new Spinner(message)](#new_visuals.Spinner_new)\n  * [.start()](#visuals.Spinner+start)\n  * [.stop()](#visuals.Spinner+stop)\n\n<a name=\"new_visuals.Spinner_new\"></a>\n#### new Spinner(message)\n**Returns**: <code>Spinner</code> - spinner instance  \n**Throws**:\n\n- Will throw if no message.\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| message | <code>String</code> | message |\n\n**Example**  \n```js\nspinner = new visuals.Spinner('Hello World')\n```\n<a name=\"visuals.Spinner+start\"></a>\n#### spinner.start()\n**Kind**: instance method of <code>[Spinner](#visuals.Spinner)</code>  \n**Summary**: Start the spinner  \n**Access:** public  \n**Example**  \n```js\nspinner = new visuals.Spinner('Hello World')\nspinner.start()\n```\n<a name=\"visuals.Spinner+stop\"></a>\n#### spinner.stop()\n**Kind**: instance method of <code>[Spinner](#visuals.Spinner)</code>  \n**Summary**: Stop the spinner  \n**Access:** public  \n**Example**  \n```js\nspinner = new visuals.Spinner('Hello World')\nspinner.stop()\n```\n<a name=\"visuals.table\"></a>\n### visuals.table : <code>object</code>\n**Kind**: static namespace of <code>[visuals](#visuals)</code>  \n\n* [.table](#visuals.table) : <code>object</code>\n  * [.horizontal(data, ordering)](#visuals.table.horizontal)\n  * [.vertical(data, ordering)](#visuals.table.vertical)\n\n<a name=\"visuals.table.horizontal\"></a>\n#### table.horizontal(data, ordering)\nNotice that you can rename columns by using the CURRENT => NEW syntax in the ordering configuration.\n\n**Kind**: static method of <code>[table](#visuals.table)</code>  \n**Summary**: Make an horizontal table  \n**Access:** public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| data | <code>Array.&lt;Object&gt;</code> | table data |\n| ordering | <code>Array.&lt;String&gt;</code> | display ordering |\n\n**Example**  \n```js\nconsole.log visuals.table.horizontal [\n\t{ name: 'John Doe', age: 40 }\n\t{ name: 'Jane Doe', age: 35 }\n], [\n\t'name => full name'\n\t'age'\n]\n\nFULL NAME AGE\nJohn Doe  40\nJane Doe  35\n```\n<a name=\"visuals.table.vertical\"></a>\n#### table.vertical(data, ordering)\nNotice that you can rename columns by using the CURRENT => NEW syntax in the ordering configuration.\n\nVertical tables also accept separators and subtitles, which are represented in the ordering configuration as empty strings and strings surrounded by dollar signs respectively.\n\n**Kind**: static method of <code>[table](#visuals.table)</code>  \n**Summary**: Make a vertical table  \n**Access:** public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| data | <code>Object</code> | table data |\n| ordering | <code>Array.&lt;String&gt;</code> | display ordering |\n\n**Example**  \n```js\nconsole.log visuals.table.vertical\n\tname: 'John Doe'\n\tage: 40\n\tjob: 'Developer'\n, [\n\t'$summary$'\n\t'name => full name'\n\t'age'\n\t''\n\t'$extras$'\n\t'job'\n]\n\n== SUMMARY\nFULL NAME: John Doe\nAGE:       40\n\n== EXTRAS\nJOB:       Developer\n```\n<a name=\"visuals.drive\"></a>\n### visuals.drive([message]) ⇒ <code>Promise.&lt;String&gt;</code>\nThe dropdown detects and autorefreshes itself when the drive list changes.\n\n**Kind**: static method of <code>[visuals](#visuals)</code>  \n**Summary**: Prompt the user to select a drive device  \n**Returns**: <code>Promise.&lt;String&gt;</code> - device path  \n**Access:** public  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [message] | <code>String</code> | <code>&#x27;Select a drive&#x27;</code> | message |\n\n**Example**  \n```js\nvisuals.drive('Please select a drive').then (drive) ->\n\tconsole.log(drive)\n```\n\nSupport\n-------\n\nIf you're having any problem, please [raise an issue](https://github.com/resin-io/resin-cli-visuals/issues/new) on GitHub and the Resin.io team will be happy to help.\n\nTests\n-----\n\nRun the test suite by doing:\n\n```sh\n$ gulp test\n```\n\nContribute\n----------\n\n- Issue Tracker: [github.com/resin-io/resin-cli-visuals/issues](https://github.com/resin-io/resin-cli-visuals/issues)\n- Source Code: [github.com/resin-io/resin-cli-visuals](https://github.com/resin-io/resin-cli-visuals)\n\nBefore submitting a PR, please make sure that you include tests, and that [coffeelint](http://www.coffeelint.org/) runs without any warning:\n\n```sh\n$ gulp lint\n```\n\nLicense\n-------\n\nThe project is licensed under the Apache 2.0 license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/resin-io/resin-cli-visuals.git"
  },
  "scripts": {
    "prepublish": "gulp build",
    "readme": "jsdoc2md --template doc/README.hbs `find build -name '*.js'` > README.md",
    "test": "gulp test"
  },
  "version": "1.2.9"
}
